[{"D:\\College\\3\\PTI Praktikum\\Week13\\countdown_kuis\\src\\index.js":"1","D:\\College\\3\\PTI Praktikum\\Week13\\countdown_kuis\\src\\App.js":"2"},{"size":155,"mtime":1607183016220,"results":"3","hashOfConfig":"4"},{"size":4828,"mtime":1607185956561,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"151vbja",{"filePath":"8","messages":"9","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\College\\3\\PTI Praktikum\\Week13\\countdown_kuis\\src\\index.js",[],"D:\\College\\3\\PTI Praktikum\\Week13\\countdown_kuis\\src\\App.js",["10","11","12","13","14","15","16","17","18"],{"ruleId":"19","severity":1,"message":"20","line":20,"column":18,"nodeType":"21","endLine":51,"endColumn":15},{"ruleId":"22","severity":1,"message":"23","line":150,"column":18,"nodeType":"24","endLine":150,"endColumn":55},{"ruleId":"25","severity":1,"message":"26","line":150,"column":18,"nodeType":"24","endLine":150,"endColumn":55},{"ruleId":"22","severity":1,"message":"23","line":150,"column":62,"nodeType":"24","endLine":150,"endColumn":96},{"ruleId":"25","severity":1,"message":"26","line":150,"column":62,"nodeType":"24","endLine":150,"endColumn":96},{"ruleId":"22","severity":1,"message":"23","line":150,"column":110,"nodeType":"24","endLine":150,"endColumn":144},{"ruleId":"25","severity":1,"message":"26","line":150,"column":110,"nodeType":"24","endLine":150,"endColumn":144},{"ruleId":"22","severity":1,"message":"23","line":150,"column":149,"nodeType":"24","endLine":150,"endColumn":185},{"ruleId":"25","severity":1,"message":"26","line":150,"column":149,"nodeType":"24","endLine":150,"endColumn":185},"react-hooks/exhaustive-deps","Assignments to the 'interval' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md"]